extends game_layout

block style
  link(rel='stylesheet', href='/css/demo.css')

block game_content

  .modal.fade(id="myModal", backdrop="static")
        .modal-dialog.modal-sm
            .modal-content
                .modal-header
                    //- button.close(type='button', data-dismiss='modal', aria-hidden='true') &times;
                    
                    h2.modal-title
                      span(id="modal_title") 
                        | Title!
                    img(src= "/assets/inspector.png")
                .modal-body
                    p 
                      span(id="modal_body") 
                        | Body!
                    p #{foo}
                .modal-footer                    
                    button.btn.btn-primary(type='button', onclick="restart()") Restart



  .header
    h1 #{date_title}
      input.finish_day_button(type="button", value="Finish day", onclick="reportEndOfDay()")
      //- span(id="budget_span").budget-span
          | Daily budget: -/-

  .progress
    .progress-bar(id="budget_progress", class="progress-bar-success", role="progressbar", aria-valuenow="70", aria-valuemin="0", aria-valuemax="100", style="width:20%")
      .myLabel(id="budget_span") 
        | Budget 

  //- h2 Debug Options
  //- p

  //- p.lead
  .jumbotron
    .game_container
      .game(id="game")
  //- hr
  .container
    .row
      .attack_container
        p
          | &#x1F44A; ATTACK by logging your expense below:

  .input_container
    //- input.previous_day_button(type="button", value="<<<", onclick="goToPreviousDay()")
    input.main_input(type="text", id="expense_input", placeholder="e.g., Groceries $13.57")
    //- input.next_day_button(type="button", value=">>>", onclick="goToNextDay()")
    ul.game_expense_list.list-group.text-center(id="expense_list")
      li.list-group-item
        span.date
          | 3 minutes ago
        | Lunch - burgers
        span.cost
          | $15.00
      li.list-group-item
        span.date
          | 4 minutes ago
        | dönner kebap
        span.cost
          | $3.00
      li.list-group-item
        span.date
          | 5 minutes ago
        | club mate
        span.cost
          | $2.00

block scripts
  //- script(src='/js/lib/jquery.inputmask.bundle.min.js')
  script(src='/js/lib/activate-power-mode.js')
  script(src='/js/lib/phaser.min.js')
  script(src='/js/game/init.js')
  script(src='/js/game/monsters.js')
  script(src='/js/game/piggy.js')
  script(src='/js/game/hero.js')
  script(src='/js/game/main.js')
  script(src='/js/lib/bootstrap.min.js')

  script.
    function reportEndOfDay() {
        console.log("reporting the end of the day...")
        //- $.get( "/game/summary/new", {date:Date.now(), balance: 20 });
        finishDay();
    }

    function showInspector() {
         var titleText = "Good job!";
         var bodyText = "You finished the day within your budget!";
         if (BB.expensesSum > 100) {
           titleText = "Oh no..!";
           bodyText = "You exceeded your daily budget today. Try to keep an eye on your expenses tomorrow!"
         }
 
         
         $("#modal_title").text(titleText); 
         $("#modal_body").text(bodyText); 
 
         $("#myModal").modal({
                       
           backdrop: 'static',
           keyboard: true,
           body: "asdasda"
         });
     }
     
    function restart() {
       location.reload();
    }


    //*** number validation ***

    function parseEnteredItem(input) {
        var withoutCurrency = input.replace("$", " ").replace("$", " ").replace("£", " ");
        console.log(withoutCurrency);
        var price = getItemPrice(withoutCurrency)
    }

    function getItemPrice(input) {

        var words = input.split(" ");
        for (var i = 0; i < words.length; i++) {
            var word = words[i];
            if (isNumeric(word)) {
                return word;
            }
        }
        return 0.00;
    }

    function isNumeric(n) {
      return !isNaN(parseFloat(n)) && isFinite(n);
    }

    function updateDailyBudget() {
      $("#budget_span").html(" Daily budget: " + BB.expensesSum.toFixed(2) + " / 100.00");

      var percents = (BB.expensesSum < 100 ? BB.expensesSum.toFixed(0) : "100") + "%"      
      $("#budget_progress").css('width', percents);

    }

    BB.expensesSum = parseFloat(2 + 3 + 15);
    function insertExpense(input) {
      var withoutCurrency = input.replace("$", " ").replace("€", " ").replace("£", " ");
      var value = getItemPrice(withoutCurrency);
      var description = withoutCurrency.replace(value, " ").replace(/\s{2,}/g, ' ')
      var value_str = "$" + parseFloat(value).toFixed(2);
      var date = new Date().toLocaleTimeString();;

      BB.expensesSum += parseFloat(value);


      updateDailyBudget()

      console.log("expenses: " + BB.expensesSum)
      if (BB.expensesSum > 50) {
          setBackgroundAttention();
          $("#budget_progress").prop("class", "progress-bar progress-bar-warning");
      }
      if (BB.expensesSum > 100) {
          setBackgroundDanger();          
          $("#budget_progress").prop("class", "progress-bar progress-bar-danger");
      }

      var new_item = $("<li style='display:none' class='list-group-item'><span class='date'>"+date+"</span> "+description+" <span class='cost'>"+value_str+"</span></li>");
      new_item.prependTo("#expense_list");
      new_item.fadeIn('slow');

    }

    function getParticlesColor() {
      if (BB.expensesSum < 50) {
        return 'rgba(65,177,5,255)' // green
      }
      else if (BB.expensesSum < 100) {
        return 'rgba(186,172,0,255)' // yellow
      }
      else {
        return 'rgba(255,0,0,255)' // red
      }
    }

  script.
    $(document).ready(function(){
      $("#expense_input").keypress(function(e) {
          if(e.which == 13) {
                var expense_input = $("#expense_input").prop("value");
                parseEnteredItem(expense_input);
                //- $.get( "/game/expense", { date:Date.now(), value:expense_input });
                BB.heroController.attack();
                BB.monsterController.hitCurrent();
                BB.piggyController.celebrate();
                insertExpense($("#expense_input").val());
                $("#expense_input").prop("placeholder", "");
                $("#expense_input").val("");
                var particlesColor = getParticlesColor();
                POWERMODE.spawnParticles(particlesColor);

          }
      });
    });

  script.
    $(document).ready(function(){
      updateDailyBudget();
    });

  script.
    $(document).ready(function() {
      var json = $.get("/game/monster/month");
      BB.game.monsters_json = json;
      BB.monsterController.addAllMonsters();
    });





  script.
    POWERMODE.colorful = true;
    document.body.addEventListener('input', POWERMODE);
    document.body.addEventListener('input', function() {
      BB.heroController.setCharacterPose();
    });



